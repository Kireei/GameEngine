#version 400 core

in vec2 pass_textureCoords;
in vec3 pass_color;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in vec4 shadowCoords;
in vec3 pass_lightingFactors;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform float ambientLight;

uniform sampler2D shadowMap;

void main(void){

	float objectNearestLight = texture(shadowMap, shadowCoords.xy).r;
	float lightFactor = 1.0;
	if(shadowCoords.z > objectNearestLight){
		lightFactor = 1.0 - 0.4;
	}
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, pass_lightingFactors.x * (ambientLight / 0.8));
	vec3 diffuse = brightness * lightColor * lightFactor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, pass_lightingFactors.y);
	vec3 finalSpecular = dampedFactor * pass_lightingFactors.z * lightColor;
	
	out_Color = vec4(diffuse, 1.0) * vec4(pass_color, 1.0) + vec4(finalSpecular, 1.0);
}
